# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  # batch = true so not every commit triggers the build
  batch: true 
  branches:
    include:
    - master
  paths:
    # include all paths as trigger for changes
    include:
    - .
pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildConfiguration: 'Release'
  runtime: 'win-x64'

stages:
- stage: Test
  jobs:
    - job: Test
      workspace:
        clean: all # what to clean up before the job runs - outputs | resources | all
      steps:     
        # Install .Net Core Version
        - task: UseDotNet@2
          displayName: 'Install .NET Core SDK'
          inputs:
            version: 3.1.x
            performMultiLevelLookup: true

        # Remove PostBuildEvents
        - task: CmdLine@2
          inputs:
            script: find . -name \*.csproj -exec sed -i '/<Exec Command="xcopy.*>/d' {} \;
            
        # Restore 
        - task: NuGetToolInstaller@1
          displayName: 'Install NuGet Tool'
        - task: NuGetCommand@2
          inputs:
            restoreSolution: '$(solution)'
        
        # Build 
        - task: DotNetCoreCLI@2
          displayName: Run dotnet build $(buildConfiguration) 
          inputs:
            command: "build"
            projects: "**/*.csproj"
            arguments: '--configuration $(buildConfiguration) --runtime $(runtime)'

        # Run Unit Tests
        - task: DotNetCoreCLI@2
          displayName: Run unittests
          inputs:
            command: "test"
            projects: "**/*.Tests.csproj"
            arguments: '--filter db\!~ss --logger trx'

        # Run Sonar Code Analysis
        - task: SonarCloudAnalyze@1

        # Publish Sonar Analysis op sonarcloud.io
        - task: SonarCloudPublish@1
          inputs:
            pollingTimeoutSec: '600'

- stage: Build
  dependsOn: Test
  displayName: Build and push stage
  jobs:  
    - job: Build
      displayName: Build
      steps:
       - task: PublishBuildArtifacts@1
         inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)\Artifacts'
          ArtifactName: 'BackendAppTest'
          publishLocation: 'Container'