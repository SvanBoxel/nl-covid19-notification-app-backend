# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  # batch = true so not every commit triggers the build
  batch: 'true'
  branches:
    include:
    - master
  paths:
    # include all paths as trigger for changes
    include:
    - .
pool:
  vmImage: 'Ubuntu-20.04'

variables:
  solution: '**/*.sln'
  buildConfiguration: 'Release'
  runtime: 'win-x64'
  Content.WebApi.ProjectsToBuildAndPublish: "src/Content.WebApi/**/*.csproj"
  ProjectsToTest: "src/Content.Commands.Tests/**/*.Tests.csproj"

stages:
# test, sonar
- stage: Test
  jobs:
    - job: Test
      workspace:
        clean: all # what to clean up before the job runs - outputs | resources | all
      steps:     
        # Install .Net Core LTS Version
        - task: UseDotNet@2
          displayName: 'Install .NET Core SDK'
          inputs:
            version: 3.1.x
            performMultiLevelLookup: true

        # Remove PostBuildEvents
        - task: CmdLine@2
          displayName: 'Remove PostBuildEvents from .csproj files'
          inputs:
            script: find . -name \*.csproj -exec sed -i '/<Exec Command="xcopy.*>/d' {} \;
       
        # Prepare analysis on SonarCloud
        #- task: SonarCloudPrepare@1
        #  displayName: 'Prepare analysis on SonarCloud'
        #  inputs:
        #    SonarCloud: 'CIBG SonarCloud'        # Name of the Service Connection in devops for SonarCloud
        #    organization: 'cibg' 
        #    scannerMode: 'MSBuild'
        #    projectKey: ''
        #    projectName: ''
        
        # Restore 
        - task: NuGetToolInstaller@1
          displayName: 'Install NuGet Tool'
        - task: NuGetCommand@2
          inputs:
            restoreSolution: '$(solution)'

        # Run Unit Tests
        - task: DotNetCoreCLI@2
          displayName: Run unittests
          inputs:
            command: "test"
            projects: $(ProjectsToTest)
            arguments: '--filter db!=ss --logger trx'

        # Run Sonar Code Analysis
        #- task: SonarCloudAnalyze@1
        #  displayName: 'Run Sonar Code Analysis'

        # Publish Sonar Analysis op sonarcloud.io
        #- task: SonarCloudPublish@1
        #  inputs:
        #    pollingTimeoutSec: '600'

# Publish build and push content.webapi stage
- stage: Build
  dependsOn: Test
  displayName: 'Publish build and push content.webapi stage'
  jobs:  
    - job: Build
      displayName: Publish Build Artifacts
      steps:
        - task: DotNetCoreCLI@2
          displayName: 'dotnet publish'
          inputs:
            command: 'publish'
            projects: $(Content.WebApi.ProjectsToBuildAndPublish)
            arguments: '-o $(Build.ArtifactStagingDirectory)/ContentApi.WebApi --no-self-contained --runtime $(runtime) --configuration $(buildConfiguration) --version-suffix $(Build.BuildNumber)-$(Build.SourceVersion)'
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/ContentApi.WebApi'
            ArtifactName: 'drop2'
            publishLocation: 'Container'

